#!/usr/bin/env python3
"""
Testes unit√°rios simples para fun√ß√µes de limpeza de texto.
"""

import sys
import os
from pathlib import Path
import unittest

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent.parent / 'src'))

class TestTextCleaning(unittest.TestCase):
    """Testes para fun√ß√µes de limpeza de texto"""
    
    def setUp(self):
        """Setup para cada teste"""
        try:
            from preprocessing.cleaner import TextCleaner
            self.cleaner = TextCleaner()
        except ImportError:
            # Implementa√ß√£o b√°sica se o m√≥dulo n√£o existir
            self.cleaner = self.BasicCleaner()
    
    class BasicCleaner:
        """Cleaner b√°sico para testes"""
        
        def clean_pt(self, text):
            """Limpeza b√°sica de texto portugu√™s"""
            import re
            if not text:
                return ""
            
            text = str(text)
            
            # Remover URLs
            text = re.sub(r'http\S+|www\S+', '', text)
            
            # Remover men√ß√µes
            text = re.sub(r'@\w+', '', text)
            
            # Remover hashtags mas manter o texto
            text = re.sub(r'#(\w+)', r'\1', text)
            
            # Remover n√∫meros isolados
            text = re.sub(r'\b\d+\b', '', text)
            
            # Manter apenas letras, espa√ßos e acentos
            text = re.sub(r'[^a-zA-Z√Ä-√ø\s]', '', text)
            
            # Remover espa√ßos extras
            text = ' '.join(text.split())
            
            return text.strip().lower()
    
    def test_remove_urls(self):
        """Testa remo√ß√£o de URLs"""
        text = "Confira este link https://exemplo.com e www.teste.org"
        expected = "confira este link e"
        result = self.cleaner.clean_pt(text)
        self.assertEqual(result, expected)
    
    def test_remove_mentions(self):
        """Testa remo√ß√£o de men√ß√µes"""
        text = "Ol√° @usuario e @outro_usuario como voc√™s est√£o?"
        expected = "ol√° e como voc√™s est√£o"
        result = self.cleaner.clean_pt(text)
        self.assertEqual(result, expected)
    
    def test_remove_hashtags_keep_text(self):
        """Testa remo√ß√£o de # mas mant√©m o texto"""
        text = "Adorei o #produto e #atendimento excelente!"
        expected = "adorei o produto e atendimento excelente"
        result = self.cleaner.clean_pt(text)
        self.assertEqual(result, expected)
    
    def test_keep_letters_and_accents(self):
        """Testa que mant√©m letras e acentos portugueses"""
        text = "A√ß√£o, rea√ß√£o, cora√ß√£o! 123 %%% S√£o Paulo"
        expected = "a√ß√£o rea√ß√£o cora√ß√£o s√£o paulo"
        result = self.cleaner.clean_pt(text)
        self.assertEqual(result, expected)
    
    def test_remove_extra_spaces(self):
        """Testa remo√ß√£o de espa√ßos extras"""
        text = "Texto    com     muitos   espa√ßos"
        expected = "texto com muitos espa√ßos"
        result = self.cleaner.clean_pt(text)
        self.assertEqual(result, expected)
    
    def test_empty_input(self):
        """Testa input vazio"""
        result = self.cleaner.clean_pt("")
        self.assertEqual(result, "")
        
        result = self.cleaner.clean_pt(None)
        self.assertEqual(result, "")
    
    def test_only_special_chars(self):
        """Testa texto com apenas caracteres especiais"""
        text = "!@#$%^&*()123"
        expected = ""
        result = self.cleaner.clean_pt(text)
        self.assertEqual(result, expected)
    
    def test_mixed_content(self):
        """Testa texto complexo misto"""
        text = "RT @user: Produto incr√≠vel! üî• https://loja.com #top 10/10 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
        expected = "rt produto incr√≠vel top"
        result = self.cleaner.clean_pt(text)
        self.assertEqual(result, expected)

class TestDataValidation(unittest.TestCase):
    """Testes para valida√ß√£o de dados"""
    
    def test_text_length_validation(self):
        """Testa valida√ß√£o de comprimento de texto"""
        
        # Texto muito curto
        short_text = "ok"
        self.assertLess(len(short_text), 10, "Texto muito curto deve ser < 10 chars")
        
        # Texto normal
        normal_text = "Este √© um texto de tamanho normal para an√°lise"
        self.assertGreaterEqual(len(normal_text), 10, "Texto normal deve ser >= 10 chars")
        self.assertLessEqual(len(normal_text), 1000, "Texto normal deve ser <= 1000 chars")
        
        # Texto muito longo
        long_text = "a" * 1001
        self.assertGreater(len(long_text), 1000, "Texto longo deve ser > 1000 chars")
    
    def test_language_detection_mock(self):
        """Testa detec√ß√£o de idioma (mock)"""
        
        # Simular detec√ß√£o de idioma
        pt_texts = [
            "Este √© um texto em portugu√™s",
            "An√°lise de sentimento √© interessante",
            "Produto muito bom, recomendo"
        ]
        
        en_texts = [
            "This is a text in English", 
            "Sentiment analysis is interesting",
            "Very good product, I recommend"
        ]
        
        # Verificar que textos em portugu√™s s√£o mais longos em m√©dia (heur√≠stica simples)
        pt_avg_len = sum(len(text) for text in pt_texts) / len(pt_texts)
        en_avg_len = sum(len(text) for text in en_texts) / len(en_texts)
        
        # Este √© um teste simples - em um caso real usar√≠amos langdetect
        self.assertIsInstance(pt_avg_len, float)
        self.assertIsInstance(en_avg_len, float)

def run_tests():
    """Executa todos os testes"""
    
    print("üß™ Executando Testes Unit√°rios")
    print("=" * 35)
    
    # Criar suite de testes
    suite = unittest.TestSuite()
    
    # Adicionar testes
    suite.addTest(unittest.makeSuite(TestTextCleaning))
    suite.addTest(unittest.makeSuite(TestDataValidation))
    
    # Executar testes
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Resumo
    print("\n" + "=" * 35)
    print(f"üéØ Testes executados: {result.testsRun}")
    print(f"‚úÖ Sucessos: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå Falhas: {len(result.failures)}")
    print(f"üí• Erros: {len(result.errors)}")
    
    if result.failures:
        print("\nüíî Falhas:")
        for test, traceback in result.failures:
            print(f"   - {test}: {traceback.split('AssertionError:')[-1].strip()}")
    
    if result.errors:
        print("\nüí• Erros:")
        for test, traceback in result.errors:
            print(f"   - {test}: {traceback.split('Exception:')[-1].strip()}")
    
    success = len(result.failures) == 0 and len(result.errors) == 0
    
    if success:
        print("\nüéâ Todos os testes passaram!")
        return 0
    else:
        print("\nüí• Alguns testes falharam!")
        return 1

if __name__ == "__main__":
    exit_code = run_tests()
    sys.exit(exit_code)
